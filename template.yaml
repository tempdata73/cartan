AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  DBUsername:
    Description: "database master user."
    Type: String
    MinLength: 1
    MaxLength: 63
    Default: postgres
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9_]{0,127}$"
    ConstraintDescription: "1-63 letters/numbers and first character must be a letter."

  DBPassword:
    Description: "database master password."
    Type: String
    MinLength: 8
    MaxLength: 128
    NoEcho: true

  DBName:
    Description: "default database name."
    Type: String
    Default: archives

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/18
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: gromov

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # subnets
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.16.0/20

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.32.0/20

  ReservedSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.48.0/20

  # public routing
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # database instance
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "subnet group for the archive db instance"
      SubnetIds: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "security group for the archive db instance"
      SecurityGroupIngress: 
        - Description: "allow access to the db from within the vpc"
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: "sg-0097d9dcdfdc50cd4"  # test-instance sg id
      VpcId: !Ref VPC

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      DBName: !Ref DBName
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: postgres
      EngineVersion: 16.5
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: false
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref DBSecurityGroup

Outputs:
  DBEndpoint:
    Description: "db instance endpoint"
    Value: !GetAtt DBInstance.Endpoint.Address
