AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  DBUsername:
    Description: "database master user."
    Type: String
    MinLength: 1
    MaxLength: 63
    Default: postgres
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9_]{0,127}$"
    ConstraintDescription: "1-63 letters/numbers and first character must be a letter."

  DBPassword:
    Description: "database master password."
    Type: String
    MinLength: 8
    MaxLength: 128
    NoEcho: true

  DBName:
    Description: "default database name."
    Type: String
    Default: archives

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/18
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: cartan

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # subnets
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.16.0/20
      AvailabilityZone: !Select [0, !GetAZs ""]

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.32.0/20
      AvailabilityZone: !Select [1, !GetAZs ""] 

  ReservedSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.48.0/20

  # public routing
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # private routing
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  # endpoints
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

  # database instance
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "subnet group for the archive db instance"
      SubnetIds: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "security group for the archive db instance"
      SecurityGroupIngress: 
        - Description: "allow access to the db from within the vpc"
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref SGAccessDB
      VpcId: !Ref VPC

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      DBName: !Ref DBName
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: postgres
      EngineVersion: 16.5
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: false
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref DBSecurityGroup

  SGAccessDB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: lambda-db
      GroupDescription: "allow entities to access db"
      VPCId: !Ref VPC

  # lambda: upload exam
  RoleUploadExam:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: "arn:aws:s3:::www.cartan.xyz/exams/*"
        - PolicyName: VPCAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSubnets
                  - ec2:DetachNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  LambdaUploadExam:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        S3Bucket: "www.cartan.xyz"
        S3Key: "lambda/upload-exam/deployment.zip"
      Environment:
        Variables:
          DB_USER: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_NAME: !Ref DBName
          DB_HOST: !GetAtt DBInstance.Endpoint.Address
      FunctionName: upload-exam
      Handler: lambda_function.lambda_handler
      PackageType: Zip
      Role: !GetAtt RoleUploadExam.Arn
      Runtime: python3.11
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - !Ref SGAccessDB
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
          - !Ref PublicSubnet

  # lambda: search courses
  RoleBasicExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: VPCAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSubnets
                  - ec2:DetachNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  LambdaSearchCourse:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        S3Bucket: "www.cartan.xyz"
        S3Key: "lambda/search-course/deployment.zip"
      Environment:
        Variables:
          DB_USER: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_NAME: !Ref DBName
          DB_HOST: !GetAtt DBInstance.Endpoint.Address
      FunctionName: search-courses
      Handler: lambda_function.lambda_handler
      PackageType: Zip
      Role: !GetAtt RoleBasicExecution.Arn
      Runtime: python3.11
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - !Ref SGAccessDB
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
          - !Ref PublicSubnet

  # lambda: detail course
  LambdaDetailCourse:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        S3Bucket: "www.cartan.xyz"
        S3Key: "lambda/get-course-detail/deployment.zip"
      Environment:
        Variables:
          DB_USER: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_NAME: !Ref DBName
          DB_HOST: !GetAtt DBInstance.Endpoint.Address
      FunctionName: get-course-detail
      Handler: lambda_function.lambda_handler
      PackageType: Zip
      Role: !GetAtt RoleBasicExecution.Arn
      Runtime: python3.11
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - !Ref SGAccessDB
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
          - !Ref PublicSubnet

  # api gateway
  HttpApi:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: cartan
      Description: api functionality for the cartan project
      ProtocolType: HTTP
      CorsConfiguration:
        AllowHeaders:
          - "*"
        AllowMethods:
          - GET
          - POST
        AllowOrigins:
          - "https://cartan.xyz"
          - "https://www.cartan.xyz"
          - "https://api.cartan.xyz"
      DisableExecuteApiEndpoint: true

  ApiDomainName:
    Type: "AWS::ApiGatewayV2::DomainName"
    Properties:
      DomainName: api.cartan.xyz
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: arn:aws:acm:us-east-1:118233586442:certificate/00240809-f0a3-462b-a803-c7741396bfb4

  MappingDomainName:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref HttpApi
      DomainName: !Ref ApiDomainName
      Stage: !Ref StageDefault

  StageDefault:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref HttpApi
      AutoDeploy: true
      Description: prod stage
      StageName: "$default"

  # api: lambda proxy: upload exam
  IntegrationUploadExam:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref HttpApi
      Description: upload-exam lambda integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":apigateway:"
          - !Ref "AWS::Region"
          - ":lambda:path/2015-03-31/functions/"
          - !GetAtt LambdaUploadExam.Arn
          - /invocations
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"

  RouteUploadExam:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      AuthorizationType: NONE
      RouteKey: "POST /upload-exam"
      Target: !Join
        - /
        - - integrations
          - !Ref IntegrationUploadExam

  PemissionUploadExam:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaUploadExam
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"

  # api: lambda proxy: search course
  IntegrationSearchCourse:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref HttpApi
      Description: search-course lambda integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":apigateway:"
          - !Ref "AWS::Region"
          - ":lambda:path/2015-03-31/functions/"
          - !GetAtt LambdaSearchCourse.Arn
          - /invocations
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"

  RouteSearchCourse:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      AuthorizationType: NONE
      RouteKey: "GET /search-course"
      Target: !Join
        - /
        - - integrations
          - !Ref IntegrationSearchCourse

  PemissionSearchCourse:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaSearchCourse
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"

  # api: lambda proxy: get course detail
  IntegrationDetailCourse:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref HttpApi
      Description: get-course-detail lambda integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":apigateway:"
          - !Ref "AWS::Region"
          - ":lambda:path/2015-03-31/functions/"
          - !GetAtt LambdaDetailCourse.Arn
          - /invocations
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"

  RouteDetailCourse:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      AuthorizationType: NONE
      RouteKey: "GET /get-course-detail"
      Target: !Join
        - /
        - - integrations
          - !Ref IntegrationDetailCourse

  PemissionDetailCourse:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaDetailCourse
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"

Outputs:
  DBEndpoint:
    Description: "db instance endpoint"
    Value: !GetAtt DBInstance.Endpoint.Address
